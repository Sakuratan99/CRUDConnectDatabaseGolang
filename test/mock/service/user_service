// Code generated by MockGen. DO NOT EDIT.
// Source: Service/user_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	Entity "DATABASECRUD/Entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserIface is a mock of UserIface interface.
type MockUserIface struct {
	ctrl     *gomock.Controller
	recorder *MockUserIfaceMockRecorder
}

// MockUserIfaceMockRecorder is the mock recorder for MockUserIface.
type MockUserIfaceMockRecorder struct {
	mock *MockUserIface
}

// NewMockUserIface creates a new mock instance.
func NewMockUserIface(ctrl *gomock.Controller) *MockUserIface {
	mock := &MockUserIface{ctrl: ctrl}
	mock.recorder = &MockUserIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserIface) EXPECT() *MockUserIfaceMockRecorder {
	return m.recorder
}

// CheckToken mocks base method.
func (m *MockUserIface) CheckToken(compareToken string, id uint, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", compareToken, id, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockUserIfaceMockRecorder) CheckToken(compareToken, id, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockUserIface)(nil).CheckToken), compareToken, id, email, password)
}

// GetToken mocks base method.
func (m *MockUserIface) GetToken(id uint, email, password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", id, email, password)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockUserIfaceMockRecorder) GetToken(id, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockUserIface)(nil).GetToken), id, email, password)
}

// Login mocks base method.
func (m *MockUserIface) Login(user *Entity.User, tempPassword string) (*Entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user, tempPassword)
	ret0, _ := ret[0].(*Entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserIfaceMockRecorder) Login(user, tempPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserIface)(nil).Login), user, tempPassword)
}

// Register mocks base method.
func (m *MockUserIface) Register(user *Entity.User) (*Entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(*Entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserIfaceMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserIface)(nil).Register), user)
}

// UpdateUser mocks base method.
func (m *MockUserIface) UpdateUser(user *Entity.User) (*Entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*Entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserIfaceMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserIface)(nil).UpdateUser), user)
}

// VerivyToken mocks base method.
func (m *MockUserIface) VerivyToken(tempToken string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerivyToken", tempToken)
	ret0, _ := ret[0].(string)
	return ret0
}

// VerivyToken indicates an expected call of VerivyToken.
func (mr *MockUserIfaceMockRecorder) VerivyToken(tempToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerivyToken", reflect.TypeOf((*MockUserIface)(nil).VerivyToken), tempToken)
}

// MockPhotoIface is a mock of PhotoIface interface.
type MockPhotoIface struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoIfaceMockRecorder
}

// MockPhotoIfaceMockRecorder is the mock recorder for MockPhotoIface.
type MockPhotoIfaceMockRecorder struct {
	mock *MockPhotoIface
}

// NewMockPhotoIface creates a new mock instance.
func NewMockPhotoIface(ctrl *gomock.Controller) *MockPhotoIface {
	mock := &MockPhotoIface{ctrl: ctrl}
	mock.recorder = &MockPhotoIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoIface) EXPECT() *MockPhotoIfaceMockRecorder {
	return m.recorder
}
